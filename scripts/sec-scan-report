#!/bin/bash
set -e

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo "Error: jq is required but not installed. Please install it first."
    exit 1
fi

usage() {
    echo "Usage: $0 (-t|--trivy-report) <trivy-report.json> [(-o|--output) <output-file.md>] [(-d|--dependency-tree) <dependency-tree.json>]"
    echo
    echo "Options:"
    echo "  -t, --trivy-report      Trivy report JSON file (required)"
    echo "  -o, --output           Output markdown file (default: ./security-report.md)"
    echo "  -d, --dependency-tree  Dependency tree JSON file (optional)"
    echo "  -h, --help            Show this help message"
    exit 1
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--trivy-report)
            TRIVY_FILE="$2"
            shift 2
            ;;
        -o|--output)
            REPORT_FILE="$2"
            shift 2
            ;;
        -d|--dependency-tree)
            DEPS_FILE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Error: Unknown option $1" >&2
            usage
            ;;
    esac
done

# Set default output file if not provided
if [ -z "$REPORT_FILE" ]; then
    REPORT_FILE="./security-report.md"
fi

# Check required parameters
if [ -z "$TRIVY_FILE" ]; then
    echo "Error: Missing required parameter: trivy report file" >&2
    usage
fi

# Check if files exist
if [ ! -f "$TRIVY_FILE" ]; then
    echo "Error: Trivy report file '$TRIVY_FILE' not found" >&2
    exit 1
fi

if [ -n "$DEPS_FILE" ] && [ ! -f "$DEPS_FILE" ]; then
    echo "Error: Dependency tree file '$DEPS_FILE' not found" >&2
    exit 1
fi

# Function to find dependency paths for a package
find_dependency_paths() {
    local pkg_name=$1
    local subproject_json=$2

    echo "$subproject_json" | jq -r --arg pkg "$pkg_name" '
        def find_paths($pkg; $current_path; $node):
            if ($node.text | contains($pkg)) then
                if $current_path == "" then $node.text
                else $current_path + " -> " + $node.text
                end
            elif ($node.children | type) == "array" then
                ($node.children[] | find_paths($pkg; if $current_path == "" then $node.text else $current_path + " -> " + $node.text end; .))
            else
                empty
            end;
        [find_paths($pkg; ""; .)] | unique | select(length > 0)
    '
}

# Generate markdown report
{
    echo "# üîç Vulnerability Summary"
    echo "Generated on: $(date)"
    echo

    # Print total count
    total_vulns=$(jq -r '.Results[] | select(.Vulnerabilities) | .Vulnerabilities | length' "$TRIVY_FILE" | awk '{sum+=$1} END{print sum}')
    echo "Found $total_vulns vulnerabilities"
    echo

    # Group by dependency source
    echo "## System Dependencies"
    echo
    while IFS= read -r vuln; do
        echo "$vuln" | jq -r '"‚ö†Ô∏è \(.PkgName) (\(.Severity)) ‚Üí Fixed in: \(.FixedVersion)"'
    done < <(jq -c '.Results[] | select(.Class == "os-pkgs") | select(.Vulnerabilities) | .Vulnerabilities[]' "$TRIVY_FILE")
    echo

    echo "## Library Dependencies"
    echo

    # Only show Raw Labs section if dependency tree is provided
    if [ -n "$DEPS_FILE" ] && [ -s "$DEPS_FILE" ]; then
        echo "### From Raw Labs"
        echo

        # Get all Raw Labs subprojects
        readarray -t subprojects < <(jq -r '.[].text | capture("com\\.raw-labs:(?<name>[^:]+)").name' "$DEPS_FILE")

        # For each subproject
        for subproject in "${subprojects[@]}"; do
            echo "#### In subproject: $subproject"
            echo

            # Get the subproject's JSON
            subproject_json=$(jq -r --arg sub "$subproject" '.[] | select(.text | contains("com.raw-labs:" + $sub + ":"))' "$DEPS_FILE")

            # Check each library vulnerability
            while IFS= read -r vuln; do
                pkg_name=$(echo "$vuln" | jq -r '.PkgName')
                paths=$(find_dependency_paths "$pkg_name" "$subproject_json")
                if [ -n "$paths" ]; then
                    echo "$vuln" | jq -r '"‚ö†Ô∏è \(.PkgName) (\(.Severity)) ‚Üí Fixed in: \(.FixedVersion)"'
                    echo "$paths" | jq -r '.[] | "  ‚Ä¢ " + .'
                    echo
                fi
            done < <(jq -c '.Results[] | select(.Class == "lang-pkgs") | select(.Vulnerabilities) | .Vulnerabilities[]' "$TRIVY_FILE")
        done

        echo "### From Third-party"
        echo
        # Print all library vulnerabilities that weren't shown in Raw Labs section
        while IFS= read -r vuln; do
            pkg_name=$(echo "$vuln" | jq -r '.PkgName')
            any_raw_labs=false
            for subproject in "${subprojects[@]}"; do
                subproject_json=$(jq -r --arg sub "$subproject" '.[] | select(.text | contains("com.raw-labs:" + $sub + ":"))' "$DEPS_FILE")
                if [ -n "$(find_dependency_paths "$pkg_name" "$subproject_json")" ]; then
                    any_raw_labs=true
                    break
                fi
            done
            if [ "$any_raw_labs" = "false" ]; then
                echo "$vuln" | jq -r '"‚ö†Ô∏è \(.PkgName) (\(.Severity)) ‚Üí Fixed in: \(.FixedVersion)"'
                # Find paths in non-Raw Labs dependencies
                for dep in $(jq -r '.[] | select(.text | contains("com.raw-labs:") | not) | .text' "$DEPS_FILE"); do
                    dep_json=$(jq -r --arg dep "$dep" '.[] | select(.text == $dep)' "$DEPS_FILE")
                    paths=$(find_dependency_paths "$pkg_name" "$dep_json")
                    if [ -n "$paths" ]; then
                        echo "$paths" | jq -r '.[] | "  ‚Ä¢ " + .'
                    fi
                done
                echo
            fi
        done < <(jq -c '.Results[] | select(.Class == "lang-pkgs") | select(.Vulnerabilities) | .Vulnerabilities[]' "$TRIVY_FILE")
    else
        # If no dependency tree, just print all vulnerabilities
        while IFS= read -r vuln; do
            echo "$vuln" | jq -r '"‚ö†Ô∏è \(.PkgName) (\(.Severity)) ‚Üí Fixed in: \(.FixedVersion)"'
        done < <(jq -c '.Results[] | select(.Class == "lang-pkgs") | select(.Vulnerabilities) | .Vulnerabilities[]' "$TRIVY_FILE")
    fi
} > "$REPORT_FILE"
