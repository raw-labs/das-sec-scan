name: 'DAS Security Scanner'
description: 'Scans Docker images for vulnerabilities and generates reports with special handling for Raw Labs dependencies'
branding:
  icon: 'shield'
  color: 'blue'

inputs:
  github-token:
    description: 'GitHub token for API access (defaults to GITHUB_TOKEN)'
    required: false
    default: ${{ github.token }}
  report-dir:
    description: 'Directory to store reports'
    required: false
    default: 'security-reports'
  severity:
    description: 'Severity levels to scan for (comma-separated)'
    required: false
    default: 'CRITICAL,HIGH'
  image-tag:
    description: 'Image tag to use for scanning. If not provided, will try to get latest release tag.'
    required: false
  image-name:
    description: 'Full image name to scan. If not provided, will be constructed from repository name and image tag.'
    required: false

outputs:
  found-vulnerabilities:
    description: 'Whether any vulnerabilities were found (true/false)'
  vulnerability-count:
    description: 'Total number of vulnerabilities found'
  report-path:
    description: 'Path to the generated report file'
  issue-number:
    description: 'Issue number if a report was created or updated'

runs:
  using: 'composite'
  steps:
    - name: Get latest release and image tag
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        if [ -n "${{ inputs.image-tag }}" ]; then
          # Use provided image tag
          IMAGE_TAG="${{ inputs.image-tag }}"
        else
          # Try to get latest release tag, exit with helpful message if none found
          if ! LATEST_RELEASE_TAG=$(gh api repos/${{ github.repository }}/releases/latest --jq .tag_name 2>/dev/null); then
            echo "::error::No image tag provided and no releases found in repository. Please either create a release or provide an image-tag input."
            exit 1
          fi
          IMAGE_TAG=$(echo "$LATEST_RELEASE_TAG" | sed 's/^v//')
        fi
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

        if [ -n "${{ inputs.image-name }}" ]; then
          IMAGE="${{ inputs.image-name }}"
        else
          SERVICE_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          IMAGE="ghcr.io/${{ github.repository }}/${SERVICE_NAME}-server:${IMAGE_TAG}"
        fi
        echo "IMAGE=${IMAGE}" >> $GITHUB_ENV

    - name: Get sbt version
      id: get-sbt-version
      shell: bash
      run: |
        SBT_VERSION=$(grep 'sbt.version=' project/build.properties | cut -d'=' -f2)
        echo "sbt_version=${SBT_VERSION}" >> $GITHUB_OUTPUT

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21
        cache: 'sbt'

    - name: Setup sbt
      uses: sbt/setup-sbt@v1
      with:
        sbt-runner-version: ${{ steps.get-sbt-version.outputs.sbt_version }}

    - name: Generate Dependency Tree
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        mkdir -p ${{ inputs.report-dir }}
        sbt dependencyBrowseTreeHTML
        mv target/tree.json ${{ inputs.report-dir }}/deptree.json

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.30.0
      id: trivy
      with:
        image-ref: ${{ env.IMAGE }}
        format: 'json'
        output: '${{ inputs.report-dir }}/vulnerabilities.json'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: ${{ inputs.severity }}
        github-pat: ${{ inputs.github-token }}

    - name: Check for vulnerabilities
      id: check_vulns
      shell: bash
      run: |
        VULN_COUNT=$(jq -r '[.Results[] | select(.Vulnerabilities) | .Vulnerabilities | length] | add // 0' ${{ inputs.report-dir }}/vulnerabilities.json)
        if [ "$VULN_COUNT" -gt 0 ]; then
          echo "found-vulnerabilities=true" >> $GITHUB_OUTPUT
        else
          echo "found-vulnerabilities=false" >> $GITHUB_OUTPUT
        fi
        echo "vulnerability-count=$VULN_COUNT" >> $GITHUB_OUTPUT

    - name: Check for existing security report
      if: steps.check_vulns.outputs.found-vulnerabilities == 'true'
      id: check_report
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        EXISTING_ISSUE=$(gh issue list \
          --state open \
          --label "version:${{ env.IMAGE_TAG }}" \
          --label "security" \
          --json number \
          --jq '.[0].number')

        if [ -n "$EXISTING_ISSUE" ]; then
          echo "existing-report=true" >> $GITHUB_OUTPUT
          echo "issue-number=$EXISTING_ISSUE" >> $GITHUB_OUTPUT
        else
          echo "existing-report=false" >> $GITHUB_OUTPUT
        fi

    - name: Generate Security Report
      if: steps.check_vulns.outputs.found-vulnerabilities == 'true'
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/sec-scan-report \
          -t ${{ inputs.report-dir }}/vulnerabilities.json \
          -o ${{ inputs.report-dir }}/vulnerabilities.md \
          -d ${{ inputs.report-dir }}/deptree.json

        # Add issue link to summary if issue exists or was created
        if [ -n "${{ steps.check_report.outputs.issue-number }}" ]; then
          echo "Issue: [#${{ steps.check_report.outputs.issue-number }}](${{ github.server_url }}/${{ github.repository }}/issues/${{ steps.check_report.outputs.issue-number }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        cat ${{ inputs.report-dir }}/vulnerabilities.md >> $GITHUB_STEP_SUMMARY
        echo "report-path=${{ inputs.report-dir }}/vulnerabilities.md" >> $GITHUB_OUTPUT

    - name: Ensure labels exist
      if: steps.check_vulns.outputs.found-vulnerabilities == 'true'
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        # Function to create label if it doesn't exist
        create_label() {
          local name=$1
          local color=$2
          local description=$3

          # Check if label exists using JSON output for exact name matching
          if ! gh label list --json name --jq '.[] | .name' | grep -Fxq "$name"; then
            gh label create "$name" \
              --color "$color" \
              --description "$description"
          fi
        }

        create_label "security" "d93f0b" "Security-related issues"
        create_label "automated" "0366d6" "Automatically generated content"
        create_label "version:${{ env.IMAGE_TAG }}" "0366d6" "Issues related to version ${{ env.IMAGE_TAG }}"

        # Create severity labels if vulnerabilities exist
        if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "CRITICAL")' ${{ inputs.report-dir }}/vulnerabilities.json > /dev/null; then
          create_label "severity:critical" "b60205" "Critical severity vulnerabilities"
        fi
        if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "HIGH")' ${{ inputs.report-dir }}/vulnerabilities.json > /dev/null; then
          create_label "severity:high" "d93f0b" "High severity vulnerabilities"
        fi
        if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "MEDIUM")' ${{ inputs.report-dir }}/vulnerabilities.json > /dev/null; then
          create_label "severity:medium" "fbca04" "Medium severity vulnerabilities"
        fi
        if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "LOW")' ${{ inputs.report-dir }}/vulnerabilities.json > /dev/null; then
          create_label "severity:low" "0e8a16" "Low severity vulnerabilities"
        fi

    - name: Create or Update Security Report Issue
      if: steps.check_vulns.outputs.found-vulnerabilities == 'true'
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        CURRENT_DATE=$(date '+%Y-%m-%d')
        TITLE="Security Scan Report for version ${{ env.IMAGE_TAG }} ($CURRENT_DATE)"

        BODY="## Security Scan Report

        **Version:** \`${{ env.IMAGE_TAG }}\`
        **Scan Date:** \`$CURRENT_DATE\`
        **Image:** \`${{ env.IMAGE }}\`

        ### Summary
        $(cat ${{ inputs.report-dir }}/vulnerabilities.md)

        ## Action Required
        - [ ] Review all vulnerabilities
        - [ ] Prioritize fixes based on severity
        - [ ] Plan updates for packages with available fixes
        - [ ] Document any accepted risks

        _This report was automatically generated by the security scan workflow._"

        LABELS="security,automated,version:${{ env.IMAGE_TAG }}"

        if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "CRITICAL")' ${{ inputs.report-dir }}/vulnerabilities.json > /dev/null; then
          LABELS="$LABELS,severity:critical"
        fi
        if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "HIGH")' ${{ inputs.report-dir }}/vulnerabilities.json > /dev/null; then
          LABELS="$LABELS,severity:high"
        fi
        if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "MEDIUM")' ${{ inputs.report-dir }}/vulnerabilities.json > /dev/null; then
          LABELS="$LABELS,severity:medium"
        fi
        if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "LOW")' ${{ inputs.report-dir }}/vulnerabilities.json > /dev/null; then
          LABELS="$LABELS,severity:low"
        fi

        if [ "${{ steps.check_report.outputs.existing-report }}" = "true" ]; then
          gh issue edit "${{ steps.check_report.outputs.issue-number }}" \
            --title "$TITLE" \
            --body "$BODY"

          gh issue view "${{ steps.check_report.outputs.issue-number }}" --json labels --jq '.labels[].name' | while read -r label; do
            gh issue edit "${{ steps.check_report.outputs.issue-number }}" --remove-label "$label"
          done

          gh issue edit "${{ steps.check_report.outputs.issue-number }}" --add-label "$LABELS"
          echo "issue-number=${{ steps.check_report.outputs.issue-number }}" >> $GITHUB_OUTPUT
        else
          ISSUE_NUMBER=$(gh issue create \
            --title "$TITLE" \
            --body "$BODY" \
            --label "$LABELS")
          echo "issue-number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        fi
